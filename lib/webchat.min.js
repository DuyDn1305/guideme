function ask(e,t){$.post({url:"/webchat/lib/webchat.php",data:e}).done(e=>t(e))}class MyEvent{constructor(){this.events=[]}add(e){this.events.push(e)}trigger(...e){this.events.forEach(t=>t(...e))}static createEventHandler(e){let t={};return e.forEach(e=>{t[e]=new MyEvent}),t}static createEventCallback(e,t){let s={};for(let o in e)s[`on${o}`]=function(...s){t?e[o].trigger(t,...s):e[o].trigger(...s)};return s}}const userEvents=["AddedToRoom","RemovedFromRoom","RoomUpdated","RoomDeleted"],roomEvents=["Message","UserJoined","UserLeft","PresenceChanged"];function getMessage(e){let t=e.parts[0],s=t.partType;return"inline"==s?t.payload.content:"url"==s?t.payload.url:t.payload.name}class WebChat{constructor(e){this.events={user:MyEvent.createEventHandler(userEvents),room:MyEvent.createEventHandler(roomEvents)},ask({chatkey:e},t=>{t=JSON.parse(t),new Chatkit.ChatManager({instanceLocator:t[0],userId:e,tokenProvider:new Chatkit.TokenProvider({url:t[1]})}).connect(MyEvent.createEventCallback(this.events.user)).then(e=>{this.user=e,this.getAllRooms(e=>this.subscribe(e.id,0)),this.on("AddedToRoom",e=>this.subscribe(e.id)),this.ready()})})}on(e,t){userEvents.includes(e)?this.events.user[e].add(t):this.events.room[e].add(t)}static createUser(e,t,s=(()=>{})){ask({createUser:{uniqueId:e,name:t}},s)}static deleteUser(e,t=(()=>{})){ask({deleteUser:e},t)}disconnect(){this.user.disconnect()}getAllRooms(e){this.user.rooms.forEach(t=>e(t))}createRoom(e,t=(()=>{})){void 0===e.name&&(e.name=`Room of ${this.user.id}`),void 0===e.addUserIds&&(e.addUserIds=[]),e.private=!0,this.user.createRoom(e).then(e=>t(e))}addUserToRoom(e,t=(()=>{})){this.user.addUserToRoom(e).then(t)}removeUserFromRoom(e,t=(()=>{})){this.user.removeUserFromRoom(e).then(t)}joinRoom(e,t=(()=>{})){this.user.joinRoom({roomId:e}).then(()=>{this.subscribe(e,0),t()})}leaveRoom(e,t=(()=>{})){this.user.leaveRoom({roomId:e}).then(t)}deleteRoom(e,t=(()=>{})){this.user.deleteRoom({roomId:e}).then(t)}sendMessage(e,t,s=(()=>{})){this.user.sendSimpleMessage({roomId:e,text:t}).then(e=>s(e))}static deleteMessage(e,t=(()=>{})){ask({deleteMsg:parseInt(e)},t)}getMessages(e,t,s,o){this.user.fetchMultipartMessages({roomId:e,initialId:t||void 0,limit:s?Math.min(s,100):void 0,direction:"older"}).then(e=>o(e))}subscribe(e,t){this.user.subscribeToRoomMultipart({roomId:e,messageLimit:t||0,hooks:MyEvent.createEventCallback(this.events.room,e)})}}